#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    char opcode[10], operand[10], label[10], mnemonic[10], code[10];
    int locctr, start, length;
    FILE *input = fopen("input.txt", "r");
    FILE *optab = fopen("optab.txt", "r");
    FILE *symbol = fopen("symtab.txt", "w");
    FILE *output = fopen("output.txt", "w");

    if (!input || !optab || !symbol || !output) {
        printf("Error opening files.\n");
        return 1;
    }

    if (fscanf(input, "%s\t%s\t%s", label, opcode, operand) == EOF) return 1;

    if (strcmp(opcode, "START") == 0) {
        start = atoi(operand);
        locctr = start;
        fprintf(output, "\t%s\t%s\t%s\n", label, opcode, operand);
        fscanf(input, "%s\t%s\t%s", label, opcode, operand);
    } else locctr = 0;

    while (strcmp(opcode, "END") != 0) {
        fprintf(output, "%04X\t", locctr);
        if (strcmp(label, "-") != 0)
            fprintf(symbol, "%s\t%04X\n", label, locctr);

        rewind(optab);
        int found = 0;
        while (fscanf(optab, "%s\t%s", code, mnemonic) != EOF) {
            if (strcmp(opcode, code) == 0) {
                locctr += 3;
                found = 1;
                break;
            }
        }

        if (!found) {
            if (strcmp(opcode, "WORD") == 0) locctr += 3;
            else if (strcmp(opcode, "RESW") == 0) locctr += 3 * atoi(operand);
            else if (strcmp(opcode, "RESB") == 0) locctr += atoi(operand);
            else if (strcmp(opcode, "BYTE") == 0) {
                if (operand[0] == 'C') locctr += strlen(operand) - 3;
                else if (operand[0] == 'X') locctr += (strlen(operand) - 3) / 2;
            }
        }

        fprintf(output, "%s\t%s\t%s\n", label, opcode, operand);
        if (fscanf(input, "%s\t%s\t%s", label, opcode, operand) == EOF) break;
    }

    fprintf(output, "\t%s\t%s\t%s\n", label, opcode, operand);
    length = locctr - start;
    printf("The length of code: %d\n", length);

    fclose(input);
    fclose(optab);
    fclose(symbol);
    fclose(output);
    return 0;
}
